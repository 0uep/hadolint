# Build starts faster without `sudo`
sudo: false

language: c
compiler: gcc

cache:
  directories:
  - $HOME/.stack
  timeout: 300

# Increase depth (from default 50) to preserve version from `git describe`
git:
  depth: 100

matrix:
  include:
    # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
    # variable, such as using --stack-yaml to point to a different file.
    - env: ARGS="--resolver lts"

    - env: ARGS="--resolver lts-9.14"
      addons:
        artifacts: {paths: [./releases]}
      before_deploy:
        # Show dynamic libraries `hadolint` depends on
        - ldd $(which hadolint) || true
        - curl -sSL https://github.com/upx/upx/releases/download/v3.94/upx-3.94-amd64_linux.tar.xz
          | tar -x --xz --strip-components=1 -C ~/.local/bin upx-3.94-amd64_linux/upx
        # Compress binary
        - upx -q --best --ultra-brute "./releases/${BINARY_NAME}"
      deploy: &release_deploy
        provider: releases
        api_key:
          secure: LyS/gc/qJNd7lXKMkXao960SI0HqNuLBXbk6SE9XGQhnOqW29yci8aGFWSvQM59009Xv90C0bD1NYYwRa6fcJb3JOlNfdPVYE4riN3oklEdGs9tBOQOZqMy0LBGIauQqWAuif5vSmkKnjeYa31BQ3MZRt7XoWepYOCF/Mpl2rw2sOX68POQLkbLS/4nFGfELXeaSR4gqcAtMqX3a4hA4F3euna7qRQeDniTKz7riA5KYfqhWdlQbI05wrrtMhqVX/9LaIVOVFVMHfVpOmyq8/4YQPdrulE/xrUu2XcOP0UidDgS0LxCc9NkiGIQjGOsZP93ibtVfGPx8XmOliW01E8N+lwR/wCmAufxdxPurn7opFMmJSOtulOzcrM5yullxn6LkpI7R/v4nRKB2sEbkALX0IYxYq/n4qF65cBZiTYRJGFYS6WGpiGDIWnvH9ymfiJYXpByEvA0PPB5FpPpp+NxZZCj95aJNgdrDWZaDBv4oXPopthh9rGxxO8CFmmz2enC9G/SSocDkGzAuJ2hY3r7sUNrT7g5i+U46P/ZEl2OPUyjM3lK07eadMbwo6CTpIaTqj/+PYg5y28O8fk3HR0b66MFxAHcsIlp1wSVeBrKRwoNLjMSpPNKwQ286R9M7E5OTORuZ/Hbuft/VSeNitSJcmTzkqs94jCuyjkMKShs=
        file: "./releases/${BINARY_NAME}"
        skip_cleanup: true
        draft: true
        tag_name: "${TRAVIS_TAG}"
        on:
          tags: true

    # Nightly builds are allowed to fail
    - env: ARGS="--resolver nightly"

    # Build on OS X in addition to Linux
    - env: ARGS="--resolver lts"
      os: osx

    - env: ARGS="--resolver lts-9.14"
      addons:
        artifacts: {paths: [./releases]}
      before_deploy:
        # Show dynamic libraries `hadolint` depends on
        - otool -L $(which hadolint) || true
        - brew update > /dev/null
        - brew install upx
        # Compress binary
        - upx -q --best --ultra-brute "./releases/${BINARY_NAME}"
      deploy:
        <<: *release_deploy
      os: osx

    - env: ARGS="--resolver nightly"
      os: osx

    - env: Build_Docker_Image
      sudo: required
      services:
        - docker
      addons:
        apt:
          packages:
            - docker-ce
      before_install: true
      install:
        # Build image
        - travis_wait 30 docker build -t hadolint:$(git describe --tags --dirty) .
      script:
        # List images
        - docker image ls
        # Lint its own Dockerfile
        - docker run --rm -i hadolint:$(git describe --tags --dirty) < Dockerfile
        # Check that version in hadolint in the same as its `git describe`
        - grep $(git describe --dirty) <<<
          $(docker run --rm -i hadolint:$(git describe --tags --dirty) hadolint --version)
      after_success: true

  allow_failures:
    - env: ARGS="--resolver nightly"

before_install:
  - export BINARY_NAME="hadolint-$(uname -s)-$(uname -m)"
  # Download and unpack the stack executable
  - mkdir -p ~/.local/bin
  - |
    if [[ "${TRAVIS_OS_NAME}" = "osx" ]]
    then
      travis_retry curl -sSL https://www.stackage.org/stack/${TRAVIS_OS_NAME}-x86_64 \
        | tar xz --strip-components=1 -C ~/.local/bin --include   '*/stack'
    else
      travis_retry curl -sSL https://www.stackage.org/stack/${TRAVIS_OS_NAME}-x86_64 \
        | tar xz --strip-components=1 -C ~/.local/bin --wildcards '*/stack'
    fi

install:
  - travis_retry stack --no-terminal --install-ghc $ARGS test --only-dependencies
  - stack --no-terminal $ARGS install --ghc-options='-fPIC'

script:
  - stack --no-terminal $ARGS test
  - hadolint Dockerfile

after_success:
  - mkdir -p ./releases/
  - cp "$(which hadolint)" "./releases/${BINARY_NAME}"
